import "pkg:/source/utilities/utilities.bs"
import "pkg:/source/api/jamendoSDK.bs"

sub init()
    m.top.backgroundColor = "#262626" '"#101010"
    m.top.backgroundURI = ""

    m.audioPlayer = m.top.findNode("audioPlayer")
    m.audioPlayer.observeField("state", "onStateChange")

    m.nowPlaying = m.top.findNode("nowPlaying")

    m.radioGrid = m.top.findNode("radioGrid")
    m.radioGrid.setFocus(true)
    m.radioGrid.observeField("selectedRadio", "onSelectedRadioChange")
end sub

sub onSelectedRadioChange()
    m.progressDialog = createObject("roSGNode", "StandardProgressDialog")
    m.progressDialog.title = "Loading"
    m.progressDialog.message = "Loading radio playlist data"
    m.top.getScene().dialog = m.progressDialog

    m.getRadiosTask = createObject("roSGNode", "GetRadios")
    m.getRadiosTask.observeField("responseBody", "onResponseBodyLoaded")

    m.getRadiosTask.clientID = `7a2ca6c8`
    m.getRadiosTask.radioID = m.radioGrid.selectedRadio
    m.getRadiosTask.control = "RUN"
end sub

sub onResponseBodyLoaded()
    if not isValid(m.getRadiosTask.responseBody) then return
    selectedRadioGenre = LCase(m.getRadiosTask.responseBody.results[0].name)

    m.getTracksTask = createObject("roSGNode", "GetTracks")
    m.getTracksTask.observeField("responseBody", "onTracksLoaded")

    m.getTracksTask.params = {
        client_id: `7a2ca6c8`,
        format: "jsonpretty",
        limit: 5,
        ' featured: 1,
        ' speed: "veryhigh",
        type: "single+albumtrack",
        tags: selectedRadioGenre
    }
    m.getTracksTask.control = "RUN"
end sub

sub onTracksLoaded()
    if not isValid(m.getTracksTask.responseBody) then return
    if not isValid(m.getTracksTask.responseBody.results) then return
    if m.getTracksTask.responseBody.results.count() = 0 then return

    m.audioContent = createObject("RoSGNode", "ContentNode")

    ' Create an array of all possible song indexes
    indexList = []
    for i = 0 to m.getTracksTask.responseBody.results.count() - 1
        indexList.push(i)
    end for

    ' Shuffle song indexes
    for i = 0 to indexList.count() - 1
        j = Rnd(indexList.count() - 1)
        temp = indexList[i]
        indexList[i] = indexList[j]
        indexList[j] = temp
    end for

    'Quick load 1st song
    song = m.getTracksTask.responseBody.results[indexList[0]]
    songContent = createObject("RoSGNode", "ContentNode")
    songContent.ContentType = 5
    songContent.url = api.tracks.file(`7a2ca6c8`, song.id)
    songContent.title = song.name
    songContent.streamformat = "mp3"
    songContent.ShortDescriptionLine1 = song.artist_name
    songContent.album = song.album_name
    songContent.FHDPosterUrl = song.image
    m.audioPlayer.content = songContent
    m.audioPlayer.control = "play"

    ' Add song content in shuffled order
    for each songIndex in indexList
        song = m.getTracksTask.responseBody.results[songIndex]
        songContent = createObject("RoSGNode", "ContentNode")
        songContent.ContentType = 5
        songContent.url = api.tracks.file(`7a2ca6c8`, song.id)
        songContent.title = song.name
        songContent.streamformat = "mp3"
        songContent.ShortDescriptionLine1 = song.artist_name
        songContent.album = song.album_name
        songContent.FHDPosterUrl = song.image
        m.audioContent.appendChild(songContent)
    end for
end sub

sub onStateChange()

    if LCase(m.audioPlayer.state) = "playing"
        m.progressDialog.close = true

        if m.nowPlaying.translation[1] <> 600
            m.nowPlaying.translation = [0, 600]
        end if
        currentSong = m.audioPlayer.content
        m.nowPlaying.trackArtist = currentSong.ShortDescriptionLine1
        m.nowPlaying.trackTitle = currentSong.title
        m.nowPlaying.trackAlbum = currentSong.album
        m.nowPlaying.trackCover = currentSong.FHDPosterUrl
        return
    end if

    if LCase(m.audioPlayer.state) = "finished"
        m.audioContent.removeChildIndex(0)
        m.audioPlayer.content = m.audioContent.getChild(0)
        m.audioPlayer.control = "play"
        return
    end if

    m.nowPlaying.translation = [0, 800]
    m.nowPlaying.trackArtist = ""
    m.nowPlaying.trackTitle = ""
    m.nowPlaying.trackAlbum = ""
    m.nowPlaying.trackCover = ""
end sub

function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    return false
end function