import "pkg:/source/utilities/utilities.bs"
import "pkg:/source/api/jamendoSDK.bs"

sub init()
    m.top.backgroundColor = "#262626"
    m.top.backgroundURI = ""

    m.audioPlayer = m.top.findNode("audioPlayer")
    m.nowPlaying = m.top.findNode("nowPlaying")

    m.audioPlayer.observeField("state", "onStateChange")
    m.audioPlayer.observeField("position", "onPositionChange")

    m.showNowPlayingAnimation = m.top.findNode("showNowPlayingAnimation")
    m.hideNowPlayingAnimation = m.top.findNode("hideNowPlayingAnimation")

    m.radioGrid = m.top.findNode("radioGrid")
    m.radioGrid.setFocus(true)
    m.radioGrid.observeField("selectedRadio", "onSelectedRadioChange")
end sub

sub onPositionChange()
    m.nowPlaying.position = m.audioPlayer.position / m.audioPlayer.duration
end sub

sub onSelectedRadioChange()
    m.progressDialog = createObject("roSGNode", "StandardProgressDialog")
    m.progressDialog.title = "Loading"
    m.progressDialog.message = "Loading radio data"
    m.top.getScene().dialog = m.progressDialog

    m.getRadiosTask = createObject("roSGNode", "GetRadios")
    m.getRadiosTask.observeField("responseBody", "onResponseBodyLoaded")

    m.getRadiosTask.radioID = m.radioGrid.selectedRadio
    m.getRadiosTask.control = "RUN"
end sub

sub onResponseBodyLoaded()
    if not isValid(m.getRadiosTask.responseBody) then return
    selectedRadioGenre = LCase(m.getRadiosTask.responseBody.results[0].name)

    m.getTracksTask = createObject("roSGNode", "GetTracks")
    m.getTracksTask.observeField("responseBody", "onTracksLoaded")

    m.getTracksTask.params = {
        format: "jsonpretty",
        limit: 200,
        lang: "en",
        ' featured: 1,
        ' speed: "veryhigh",
        type: "single+albumtrack",
        tags: selectedRadioGenre,
        groupby: "artist_id",
        audioformat: "mp32",
        imagesize: "200"
    }
    m.getTracksTask.control = "RUN"
end sub

sub noTracksFound()
    m.progressDialog.close = true

    m.noTracksDialog = createObject("roSGNode", "StandardMessageDialog")
    m.noTracksDialog.title = "No Tracks Found"
    m.noTracksDialog.message = ["Jamendo returned no tracks for this radio."]
    m.noTracksDialog.buttons = ["OK"]
    m.noTracksDialog.observeFieldScoped("buttonSelected", "closeNoTracksDialog")
    m.top.getScene().dialog = m.noTracksDialog
end sub

sub closeNoTracksDialog()
    m.noTracksDialog.close = true
end sub

sub onTracksLoaded()
    if not isValid(m.getTracksTask.responseBody)
        noTracksFound()
        return
    end if

    if not isValid(m.getTracksTask.responseBody.results)
        noTracksFound()
        return
    end if

    if isEmpty(m.getTracksTask.responseBody.results)
        noTracksFound()
        return
    end if

    ' Create an array of all possible song indexes
    indexList = []
    for i = 0 to m.getTracksTask.responseBody.results.count() - 1
        indexList.push(i)
    end for

    m.indexList = shuffleArray(indexList)

    ' Load 1st song
    m.audioPlayer.content = loadNextSong()
    m.audioPlayer.control = "play"
end sub

function shuffleArray(input as object) as object

    if not isValid(input) then return []
    if isEmpty(input) then return []

    arrayToShuffle = input.slice()

    ' Shuffle song indexes
    for i = 0 to arrayToShuffle.count() - 1
        j = Rnd(arrayToShuffle.count() - 1)
        temp = arrayToShuffle[i]
        arrayToShuffle[i] = arrayToShuffle[j]
        arrayToShuffle[j] = temp
    end for

    return arrayToShuffle
end function

sub onStateChange()
    m.nowPlaying.isPaused = LCase(m.audioPlayer.state) = "paused"

    if LCase(m.audioPlayer.state) = "playing"
        m.audioPlayer.disableScreenSaver = true
        m.progressDialog.close = true

        if m.nowPlaying.translation[1] <> 600
            m.showNowPlayingAnimation.control = "start"
        end if
        currentSong = m.audioPlayer.content
        m.nowPlaying.trackArtist = currentSong.ShortDescriptionLine1
        m.nowPlaying.trackTitle = currentSong.title
        m.nowPlaying.trackAlbum = currentSong.album
        m.nowPlaying.trackCover = currentSong.FHDPosterUrl

        screenSaver = m.top.findNode("screenSaver")
        if isValid(screenSaver)
            screenSaver.trackCover = currentSong.FHDPosterUrl
        end if
        return
    end if

    if LCase(m.audioPlayer.state) = "finished"
        if m.indexList.count() > 0
            m.audioPlayer.content = loadNextSong()
            m.audioPlayer.control = "play"
            return
        end if
    end if

    ' There are no more songs in the queue
    if isEmpty(m.indexList)
        m.audioPlayer.disableScreenSaver = false
        m.hideNowPlayingAnimation.control = "start"
        m.nowPlaying.trackArtist = ""
        m.nowPlaying.trackTitle = ""
        m.nowPlaying.trackAlbum = ""
        m.nowPlaying.trackCover = ""
    end if
end sub

function loadNextSong() as object
    song = m.getTracksTask.responseBody.results[m.indexList.shift()]
    songContent = createObject("RoSGNode", "ContentNode")
    songContent.ContentType = 5
    songContent.url = song.audio
    songContent.title = song.name
    songContent.streamformat = "mp3"
    songContent.ShortDescriptionLine1 = song.artist_name
    songContent.album = song.album_name
    songContent.FHDPosterUrl = song.image
    return songContent
end function

function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    if LCase(key) = "play"
        m.audioPlayer.control = LCase(m.audioPlayer.state) = "paused" ? "resume" : "pause"
        return true
    end if

    if LCase(key) = "up"
        screenSaver = createObject("roSGNode", "ScreenSaver")
        screenSaver.id = "screenSaver"
        screenSaver.trackCover = m.audioPlayer.content.FHDPosterUrl
        m.top.appendChild(screenSaver)
        return true
    end if

    return false
end function
