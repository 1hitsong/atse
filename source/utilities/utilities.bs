' isValid: Returns whether or not passed value is valid
'
' @param {dynamic} input - item to be evaluated
'
' @return {boolean} indicating if passed input is valid
function isValid(input as dynamic) as boolean
    return input <> invalid
end function

' isEmpty: Returns whether or not passed object is empty
'
' @param {dynamic} input - item to be evaluated
'
' @return {boolean} indicating if passed object has no count or is not valid
function isEmpty(input as object) as boolean
    if not isValid(input) then return true

    return input.count() = 0
end function

' isAllValid: Returns whether or not all items in passed array are valid
'
' @param {object} input - array of items to be evaluated
'
' @return {boolean} indicating if all passed inputs are valid
function isAllValid(input as object) as boolean
    for each item in input
        if not isValid(item) then return false
    end for
    return true
end function

' map: Converts associative array to string
'
' @param {dynamic} input - associative array to convert
'
' @return {string} conversion of array
function map(input as dynamic) as string
    output = []
    for each item in input.Items()
        if isValid(item.value)
            if LCase(type(item.value)) = "roint" and item.value = 0 then continue for
            output.push(`${item.key}=${item.value}`)
        end if
    end for
    return output.join("&")
end function

' getJson: Makes a URL transfer request, returns parsed JSON return
'
' @param {string} url - URL to make request to
'
' @return {dynamic} returned JSON data from URL
function getJson(url as string) as dynamic
    request = CreateObject("roUrlTransfer")
    request.SetCertificatesFile("common:/certs/ca-bundle.crt")
    request.InitClientCertificates()
    request.SetURL(url)

    return ParseJson(request.GetToString())
end function

' decode: Replaces HTML encoded strings with their respective characters
'
' @param {string} input - string to decode
'
' @return {string} with encoded characters replaced
function decode(input as string) as string
    return input.replace("&amp;", "&")
end function


function roundToNearest(target as integer, input as dynamic) as integer
    return (int(input / target) * target)
end function
